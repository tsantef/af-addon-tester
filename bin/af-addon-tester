#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'rubygems'
require 'json'
require 'digest/sha1'
require 'af-addon-tester'
require 'restclient'
require 'uuid'

puts "AppFog Addon Tester v#{AppFog::AddonTester::VERSION}"
VERSION = AppFog::AddonTester::VERSION
manifest_path = ARGV.last

do_asyc = ARGV.include?('-a')
username = nil

begin
  manifest_file = File.open(File.expand_path(manifest_path), 'r')
  manifest_json = File.read(manifest_file)
  manifest = JSON.parse(manifest_json)

  raise "Missing id" if manifest['id'].nil?
  raise "Missing api section" if manifest['api'].nil?
  raise "Missing api password" if manifest['api']['password'].nil?
  raise "Missing apt test url" if manifest['api']['test'].nil?
  raise "Manifest must have atleast one plan" if manifest['plans'].nil? || manifest['plans'][0].nil? || manifest['plans'][0]['id'].nil?
  raise "Missing api config_vars" if manifest['api']['config_vars'].nil?
  raise "Missing api sso_salt" if manifest['api']['sso_salt'].nil?
rescue Exception => e
  puts bwhite "#{e.message}. Please specify a valid manifest file."
  exit
end

customer_id = "phpfog#{UUID.new.generate}@appfog.com"
callback_url = 'http://localhost:9990'
plan = manifest['plans'][0]['id']
config_prefix = manifest['id'].gsub('-','_').upcase + '_'
username = manifest['api']['username'] || manifest['id']
password = manifest['api']['password']
bad_user = 'bad_user'
bad_password = 'bad_pass'
resource_host = manifest['api']['test']
resources_path = (manifest['api']['path'] || 'appfog/resources').gsub(/^\/+/,'')
sso_salt = manifest['api']['sso_salt']

puts ""
puts "  Target: #{bwhite(resource_host + resources_path)}"
puts "  Customer ID: #{bwhite(customer_id)}"
puts "  Plan: #{bwhite(manifest['plans'][0]['id'])}"
puts "  Callback URL: #{bwhite(callback_url)}"
puts "  Config Prefix: #{bwhite(config_prefix)}"
puts "  Basic Auth User: #{bwhite(username)}"
puts "  Basic Auth Password: #{bwhite(password[0..2]+password[3..-1].gsub(/./,'*'))}"
puts "  SSO Salt: #{bwhite(sso_salt[0..2]+sso_salt[3..-1].gsub(/./,'*'))}"
puts ""

addon = RestClient::Resource.new resource_host, {:user => username, :password => password}
headers = { :accept => "application/json", :content_type => "application/json", "User-Agent" => "af-addon-tester/#{VERSION}" }

resp = nil
code = nil

validate "Provisioning" do
  payload = { 'customer_id' => "appfog#{rand(10000)}@appfog.com", 'plan' => 'test', 'callback_url' => callback_url, 'options' => '{}' }
  begin
    resp = addon[resources_path].post JSON.generate(payload), headers
    failed("response code: #{resp.code}") if resp.code != 200
    code = resp.code
  rescue RestClient::ExceptionWithResponse => rest_err
    code = rest_err.http_code
    failed("response code: #{rest_err.message}")
  end
  passed
end

  if code == 200
  provision_info = nil
  validate "Valid JSON response" do
    begin
      provision_info = JSON.parse(resp.body)
    rescue Exception => e
      failed e.message
    end
    passed
  end

  unless provision_info.nil?
    validate "Response params" do
      begin
        failed("Missing 'id'") if provision_info['id'].nil? || provision_info['id'] == ""
      rescue Exception => e
        failed e.message
      end
      passed
    end

    unless provision_info['config'].nil?
      validate "All config keys are in manifest" do
        provision_info['config'].each do |key, value|
          unless manifest['api']['config_vars'].include? key; failed "#{key} not found in config"; end
        end
      end

      validate "All manifest config keys are in response" do
        manifest['api']['config_vars'].each do |key, value|
          unless provision_info['config'].include? key; failed "#{key} not found in manifest"; end
        end
      end

      validate "All config keys are prefixed with addon name" do
        provision_info['config'].each do |key, value|
          unless key.start_with? config_prefix; failed "#{key} does not begin with #{config_prefix}"; end
        end
        passed
      end
    end

    resource_id = provision_info['id']
    unless resource_id.nil?
      validate "Update resource" do
        payload = { 'customer_id' => customer_id, 'plan' => plan }
        begin
          resp = addon[File.join(resources_path, resource_id.to_s)].put JSON.generate(payload), headers
          failed("response code: #{resp.code}") if resp.code != 200
        rescue RestClient::ExceptionWithResponse => rest_err
          failed("response code: #{rest_err.message}")
        end
        passed
      end

      if do_asyc
        READLEN = 1024 * 10
        reader, writer = IO.pipe
        out = nil
        validate "Callback" do
          child = fork do
            reader.close
            server = TCPServer.open(9990)
            client = server.accept
            writer.write(client.readpartial(READLEN))
            client.write("HTTP/1.1 200 OK\r\nContent-Length: 0\r\n\r\n")
            client.close
            writer.close
          end
          sleep(1)
          out = reader.readpartial(READLEN)
          passed
        end

        callback_info = nil
        isValidCallback = false
        validate "Valid callback response" do
          _, json = out.split("\r\n\r\n")
          begin
            callback_info = JSON.parse(json)
          rescue Exception => e
            failed e.message
          end
          isValidCallback = true
          passed
        end

        if isValidCallback
          validate "All callback config keys are in manifest" do
            callback_info['config'].each do |key, value|
              unless manifest['api']['config_vars'].include? key; failed "#{key} not found in config"; end
            end
          end

          validate "All callback manifest config keys are in response" do
            manifest['api']['config_vars'].each do |key, value|
              unless callback_info['config'].include? key; failed "#{key} not found in manifest"; end
            end
          end

          validate "All callback config keys are prefixed with addon name" do
            callback_info['config'].each do |key, value|
              unless key.start_with? config_prefix; failed "#{key} does not begin with #{config_prefix}"; end
            end
            passed
          end
        end
      end

      validate "SSO link" do
        timestamp = Time.now.to_i
        authstring = resource_id.to_s + ':' + sso_salt + ':' + timestamp.to_s
        token = Digest::SHA1.hexdigest(authstring)
        addon_sso = RestClient::Resource.new resource_host
        sso_headers = { :accept => "text/html", :content_type => "text/html", "User-Agent" => "af-addon-tester/#{VERSION}" }
        begin
          expected = [200, 301, 302, 303, 304, 307]
          resp = addon_sso[File.join(resources_path, resource_id.to_s) + "?token=#{token}&timestamp=#{timestamp}"].get sso_headers
          failed("response code: #{resp.code}") if !expected.include?(resp.code)
        rescue RestClient::ExceptionWithResponse => rest_err
          failed("response code: #{rest_err.message}")
        end
        passed
      end

      validate "Deprovision" do
        resp = addon[File.join(resources_path, resource_id.to_s)].delete
        failed("response code: #{resp.code}") if resp.code != 200
        passed
      end

    end
  end

else
  false
end

validate "Bad credentials test" do
  payload = { 'customer_id' => customer_id, 'plan' => plan, 'callback_url' => callback_url, 'options' => '{}' }

  addon_bad_auth = RestClient::Resource.new resource_host, { :username => bad_user, :password => bad_password }

  code = nil
  begin
    resp = addon_bad_auth[File.join(resources_path, resource_id.to_s)].post JSON.generate(payload), headers
    code = resp.code
  rescue RestClient::ExceptionWithResponse => rest_err
    code = rest_err.http_code
  end
  passed unless code == 200
end
